import mysql.connector
from tabulate import tabulate

# Database connection parameters
db_config = {
    "host": "localhost",
    "user": "nikita",
    "password": "nikita!##123",
    "database": "academic_journals",
    "charset": "utf8mb4",
    "collation": "utf8mb4_unicode_ci"
}


def connect_to_db():
    """Establish connection to the database"""
    try:
        conn = mysql.connector.connect(**db_config)
        return conn
    except mysql.connector.Error as err:
        print(f"Connection error: {err}")
        return None


def check_all_files(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    cursor = conn.cursor()

    print("üìÅ –í–°–ï –§–ê–ô–õ–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 80)

    query = """
    SELECT 
        j.journal_name AS '–ñ—É—Ä–Ω–∞–ª',
        i.issue_number AS '–í—ã–ø—É—Å–∫',
        COUNT(DISTINCT mt.page_name) AS '–°—Ç—Ä–∞–Ω–∏—Ü',
        COUNT(DISTINCT dr.reference_id) AS '–°—Å—ã–ª–æ–∫',
        COUNT(DISTINCT ft.footnote_id) AS '–°–Ω–æ—Å–æ–∫',
        i.created_at AS '–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞'
    FROM journals j
    JOIN issues i ON j.journal_id = i.journal_id
    LEFT JOIN main_texts mt ON i.issue_id = mt.issue_id
    LEFT JOIN document_references dr ON i.issue_id = dr.issue_id
    LEFT JOIN footnotes_table ft ON i.issue_id = ft.issue_id
    GROUP BY j.journal_name, i.issue_number, i.created_at
    ORDER BY j.journal_name, CAST(i.issue_number AS UNSIGNED)
    """

    cursor.execute(query)
    results = cursor.fetchall()

    if results:
        headers = ['–ñ—É—Ä–Ω–∞–ª', '–í—ã–ø—É—Å–∫', '–°—Ç—Ä–∞–Ω–∏—Ü', '–°—Å—ã–ª–æ–∫', '–°–Ω–æ—Å–æ–∫', '–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞']
        print(tabulate(results, headers=headers, tablefmt='grid'))
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    cursor.close()


def check_journal_files(conn, journal_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞"""
    cursor = conn.cursor()

    print(f"üìñ –§–ê–ô–õ–´ –ñ–£–†–ù–ê–õ–ê: {journal_name}")
    print("=" * 60)

    query = """
    SELECT 
        i.issue_number AS '–í—ã–ø—É—Å–∫',
        COUNT(DISTINCT mt.page_name) AS '–°—Ç—Ä–∞–Ω–∏—Ü',
        COUNT(DISTINCT dr.reference_id) AS '–°—Å—ã–ª–æ–∫',
        COUNT(DISTINCT ft.footnote_id) AS '–°–Ω–æ—Å–æ–∫',
        i.created_at AS '–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞'
    FROM issues i
    JOIN journals j ON i.journal_id = j.journal_id
    LEFT JOIN main_texts mt ON i.issue_id = mt.issue_id
    LEFT JOIN document_references dr ON i.issue_id = dr.issue_id
    LEFT JOIN footnotes_table ft ON i.issue_id = ft.issue_id
    WHERE j.journal_name = %s
    GROUP BY i.issue_number, i.created_at
    ORDER BY CAST(i.issue_number AS UNSIGNED)
    """

    cursor.execute(query, (journal_name,))
    results = cursor.fetchall()

    if results:
        headers = ['–í—ã–ø—É—Å–∫', '–°—Ç—Ä–∞–Ω–∏—Ü', '–°—Å—ã–ª–æ–∫', '–°–Ω–æ—Å–æ–∫', '–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞']
        print(tabulate(results, headers=headers, tablefmt='grid'))
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –≤—ã–ø—É—Å–∫–æ–≤: {len(results)}")
    else:
        print(f"‚ùå –§–∞–π–ª—ã –∂—É—Ä–Ω–∞–ª–∞ '{journal_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    cursor.close()


def check_missing_files(conn, expected_files):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    cursor = conn.cursor()

    print("üîç –ü–†–û–í–ï–†–ö–ê –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –§–ê–ô–õ–û–í")
    print("=" * 50)

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    query = """
    SELECT CONCAT(LOWER(j.journal_name), i.issue_number) as file_pattern
    FROM journals j
    JOIN issues i ON j.journal_id = i.journal_id
    """

    cursor.execute(query)
    existing_files = {row[0] for row in cursor.fetchall()}

    missing_files = []
    for expected_file in expected_files:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω (—É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã)
        file_pattern = expected_file.lower()
        file_pattern = file_pattern.replace('_footnotes.xml', '')
        file_pattern = file_pattern.replace('_footnotes.csv', '')
        file_pattern = file_pattern.replace('.xml', '')
        file_pattern = file_pattern.replace('.csv', '')

        if file_pattern not in existing_files:
            missing_files.append(expected_file)

    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
    else:
        print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    cursor.close()
    return missing_files


def get_database_stats(conn):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cursor = conn.cursor()

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 40)

    stats_queries = [
        ("–ñ—É—Ä–Ω–∞–ª–æ–≤", "SELECT COUNT(*) FROM journals"),
        ("–í—ã–ø—É—Å–∫–æ–≤", "SELECT COUNT(*) FROM issues"),
        ("–°—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º", "SELECT COUNT(*) FROM main_texts"),
        ("–°—Å—ã–ª–æ–∫", "SELECT COUNT(*) FROM document_references"),
        ("–°–Ω–æ—Å–æ–∫", "SELECT COUNT(*) FROM footnotes_table")
    ]

    stats = []
    for name, query in stats_queries:
        cursor.execute(query)
        count = cursor.fetchone()[0]
        stats.append([name, count])

    print(tabulate(stats, headers=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], tablefmt='grid'))
    cursor.close()


def search_file(conn, search_term):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    cursor = conn.cursor()

    print(f"üîé –ü–û–ò–°–ö: '{search_term}'")
    print("=" * 40)

    query = """
    SELECT 
        j.journal_name AS '–ñ—É—Ä–Ω–∞–ª',
        i.issue_number AS '–í—ã–ø—É—Å–∫',
        COUNT(DISTINCT mt.page_name) AS '–°—Ç—Ä–∞–Ω–∏—Ü',
        COUNT(DISTINCT dr.reference_id) AS '–°—Å—ã–ª–æ–∫',
        COUNT(DISTINCT ft.footnote_id) AS '–°–Ω–æ—Å–æ–∫'
    FROM journals j
    JOIN issues i ON j.journal_id = i.journal_id
    LEFT JOIN main_texts mt ON i.issue_id = mt.issue_id
    LEFT JOIN document_references dr ON i.issue_id = dr.issue_id
    LEFT JOIN footnotes_table ft ON i.issue_id = ft.issue_id
    WHERE LOWER(CONCAT(j.journal_name, i.issue_number)) LIKE %s
    GROUP BY j.journal_name, i.issue_number
    ORDER BY j.journal_name, CAST(i.issue_number AS UNSIGNED)
    """

    cursor.execute(query, (f'%{search_term.lower()}%',))
    results = cursor.fetchall()

    if results:
        headers = ['–ñ—É—Ä–Ω–∞–ª', '–í—ã–ø—É—Å–∫', '–°—Ç—Ä–∞–Ω–∏—Ü', '–°—Å—ã–ª–æ–∫', '–°–Ω–æ—Å–æ–∫']
        print(tabulate(results, headers=headers, tablefmt='grid'))
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    else:
        print(f"‚ùå –§–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    cursor.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    conn = connect_to_db()
    if not conn:
        return

    while True:
        print("\n" + "=" * 60)
        print("üóÉÔ∏è  –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("=" * 60)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª")
        print("3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("4. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞")
        print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("0. –í—ã—Ö–æ–¥")
        print("=" * 60)

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()

        if choice == '1':
            check_all_files(conn)

        elif choice == '2':
            journal_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ (Tarbiz, Leshonenu, –∏ —Ç.–¥.): ").strip()
            check_journal_files(conn, journal_name)

        elif choice == '3':
            get_database_stats(conn)

        elif choice == '4':
            search_term = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            search_file(conn, search_term)

        elif choice == '5':
            print("–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
            expected_files = []
            while True:
                file_name = input("–§–∞–π–ª: ").strip()
                if not file_name:
                    break
                expected_files.append(file_name)

            if expected_files:
                check_missing_files(conn, expected_files)
            else:
                print("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç")

        elif choice == '0':
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    conn.close()
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    main()